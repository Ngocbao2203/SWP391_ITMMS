import apiService from './api';
import { API_ENDPOINTS } from './apiConstants';

class AuthService {
  constructor() {
    this.currentUser = null;
    this.loadUserFromStorage();
  }

  // Load user t·ª´ localStorage khi kh·ªüi t·∫°o
  loadUserFromStorage() {
    try {
      const userData = localStorage.getItem('user');
      if (userData) {
        this.currentUser = JSON.parse(userData);
        console.log('Loaded user from storage:', this.currentUser);
      } else {
        console.log('No user data found in storage');
      }
    } catch (error) {
      console.error('Error loading user from storage:', error);
      localStorage.removeItem('user');
      this.currentUser = null;
    }
  }

  // L∆∞u user v√†o localStorage
  saveUserToStorage(user) {
    try {
      localStorage.setItem('user', JSON.stringify(user));
      this.currentUser = user;
      console.log('User saved to storage:', this.currentUser);
    } catch (error) {
      console.error('Error saving user to storage:', error);
    }
  }

  // X√≥a user kh·ªèi localStorage
  removeUserFromStorage() {
    localStorage.removeItem('user');
    this.currentUser = null;
    console.log('User removed from storage');
  }

  /**
   * ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi
   * @param {Object} userData - D·ªØ li·ªáu ƒëƒÉng k√Ω
   */
  async register(userData) {
    try {
      const registrationData = {
        ...userData,
        role: userData.role || 'Customer',
        confirmPassword: userData.password,
      };
      
      console.log('üì§ Sending registration data:', registrationData);
      const response = await apiService.post(API_ENDPOINTS.AUTH.REGISTER, registrationData);
      console.log('üì• Registration response:', response);
      
      if (response && (response.message || response.user)) {
        return {
          success: true,
          message: response.message || 'ƒêƒÉng k√Ω th√†nh c√¥ng',
          userId: response.user?.id || response.userId,
          user: response.user,
        };
      }
      
      return {
        success: false,
        message: 'ƒêƒÉng k√Ω th·∫•t b·∫°i',
      };
    } catch (error) {
      console.error('‚ùå Registration error:', error);
      return {
        success: false,
        message: error.message || 'ƒêƒÉng k√Ω th·∫•t b·∫°i',
        errors: error.getValidationErrors ? error.getValidationErrors() : null,
      };
    }
  }

  /**
   * ƒêƒÉng nh·∫≠p
   * @param {Object} credentials - Email v√† password
   */
  async login(credentials) {
    try {
      console.log('üì§ Sending login request:', credentials);
      const response = await apiService.post(API_ENDPOINTS.AUTH.LOGIN, credentials);
      console.log('üì• Login response:', response);
      
      if (response && response.user) {
        const user = response.user;
        
        // ƒê·∫£m b·∫£o token ƒë∆∞·ª£c g√°n t·ª´ response
        if (response.token) {
          user.token = response.token; // G√°n token v√†o user object
        } else if (response.accessToken) {
          user.token = response.accessToken; // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p token c√≥ t√™n kh√°c
        }

        if (!user.token) {
          console.warn('No token found in login response:', response);
          return {
            success: false,
            message: 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i: Kh√¥ng t√¨m th·∫•y token',
          };
        }

        this.saveUserToStorage(user);
        return {
          success: true,
          message: response.message || 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
          user: user,
        };
      }
      
      return {
        success: false,
        message: response.message || 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng',
      };
    } catch (error) {
      console.error('‚ùå Login error:', error);
      return {
        success: false,
        message: error.message || 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i',
        errors: error.getValidationErrors ? error.getValidationErrors() : null,
      };
    }
  }

  /**
   * ƒêƒÉng xu·∫•t
   */
  logout() {
    this.removeUserFromStorage();
    return {
      success: true,
      message: 'ƒêƒÉng xu·∫•t th√†nh c√¥ng',
    };
  }

  /**
   * L·∫•y th√¥ng tin user hi·ªán t·∫°i
   */
  getCurrentUser() {
    return this.currentUser;
  }

  /**
   * Ki·ªÉm tra user c√≥ ƒëƒÉng nh·∫≠p hay kh√¥ng
   */
  isAuthenticated() {
    return this.currentUser !== null;
  }

  /**
   * Ki·ªÉm tra role c·ªßa user
   * @param {string|Array} roles - Role ho·∫∑c danh s√°ch roles
   */
  hasRole(roles) {
    if (!this.currentUser) return false;
    
    if (Array.isArray(roles)) {
      return roles.includes(this.currentUser.role);
    }
    
    return this.currentUser.role === roles;
  }

  /**
   * Ki·ªÉm tra email c√≥ t·ªìn t·∫°i hay kh√¥ng
   * @param {string} email 
   */
  async checkEmailExists(email) {
    try {
      const response = await apiService.post(API_ENDPOINTS.AUTH.CHECK_EMAIL, { email });
      return response;
    } catch (error) {
      throw error;
    }
  }

  /**
   * Ki·ªÉm tra username c√≥ t·ªìn t·∫°i hay kh√¥ng
   * @param {string} username 
   */
  async checkUsernameExists(username) {
    try {
      const response = await apiService.post(API_ENDPOINTS.AUTH.CHECK_USERNAME, { username });
      return response;
    } catch (error) {
      throw error;
    }
  }

  /**
   * L·∫•y profile user
   * @param {number} userId 
   */
  async getUserProfile(userId) {
    try {
      const response = await apiService.get(API_ENDPOINTS.AUTH.PROFILE(userId));
      return response;
    } catch (error) {
      throw error;
    }
  }

  /**
   * C·∫≠p nh·∫≠t profile user
   * @param {number} userId 
   * @param {Object} profileData 
   */
  async updateProfile(userId, profileData) {
    try {
      const response = await apiService.put(`/auth/profile?id=${userId}`, profileData);
      
      if (this.currentUser && this.currentUser.id === userId) {
        const updatedUser = { ...this.currentUser, ...profileData };
        this.saveUserToStorage(updatedUser);
      }
      
      return {
        success: true,
        message: 'C·∫≠p nh·∫≠t profile th√†nh c√¥ng',
        data: response,
      };
    } catch (error) {
      return {
        success: false,
        message: error.message || 'C·∫≠p nh·∫≠t profile th·∫•t b·∫°i',
        errors: error.getValidationErrors(),
      };
    }
  }

  /**
   * ƒê·ªïi m·∫≠t kh·∫©u
   * @param {Object} passwordData - userId, oldPassword, newPassword
   */
  async changePassword(passwordData) {
    try {
      const response = await apiService.post(API_ENDPOINTS.AUTH.CHANGE_PASSWORD, passwordData);
      return {
        success: true,
        message: response.message || 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng',
      };
    } catch (error) {
      return {
        success: false,
        message: error.message || 'ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i',
        errors: error.getValidationErrors(),
      };
    }
  }

  /**
   * L·∫•y l·ªãch s·ª≠ c·ªßa user
   * @param {number} userId 
   */
  async getUserHistory(userId) {
    try {
      const response = await apiService.get(API_ENDPOINTS.AUTH.HISTORY(userId));
      return response;
    } catch (error) {
      throw error;
    }
  }

  /**
   * T·∫°o feedback
   * @param {Object} feedbackData 
   */
  async createFeedback(feedbackData) {
    try {
      const response = await apiService.post(API_ENDPOINTS.AUTH.FEEDBACK, feedbackData);
      return {
        success: true,
        message: 'G·ª≠i feedback th√†nh c√¥ng',
        data: response,
      };
    } catch (error) {
      return {
        success: false,
        message: error.message || 'G·ª≠i feedback th·∫•t b·∫°i',
        errors: error.getValidationErrors(),
      };
    }
  }

  /**
   * Test connection
   */
  async testConnection() {
    try {
      const response = await apiService.get(API_ENDPOINTS.AUTH.TEST);
      return response;
    } catch (error) {
      throw error;
    }
  }
}

// Helper function ƒë·ªÉ format error messages
export const formatErrorMessage = (error) => {
  if (error?.message) {
    return error.message;
  }
  if (error?.response?.data?.message) {
    return error.response.data.message;
  }
  if (typeof error === 'string') {
    return error;
  }
  return 'C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.';
};

// Export singleton instance
const authService = new AuthService();
export default authService;